# Class file for Beatboxing Sound Object

import numpy as np
# import librosa as lb
# import matplotlib.pyplot as plt
# import IPython.display as ipd
# import scipy.io as sio


class Sound:
    name = '' # Full name of sound
    sbn = '' # SBN notation for sound
    data = None # time domain data
    dft = None # freq domain data
    stft = None # freq & time domain data   
    env = None # Envelope generated by autocorellation

    prom = None # Prominence of DFT peaks
    
    ### Feature vector parameters ###
    attack = 0 # Time to peak
    decay = 0 # Time from peak to steady state
    sustain = 0 # Time at steady state
    release = 0 # Time from steady state to end

    f0 = 0 # Freq bin with most energy (argmax)
    f0E = 0 # Max energy in sound (max)
    f0T = 0 # Time of max energy (argmax)

    spread_avg = 0 # Largest range of frequencies that are above certain energy threshold
    lowE_avg = 0; midE_avg = 0; highE_avg = 0 # Sum up certain bands of the spectra (3 or more, not evenly split)

    maxProm = 0 # Maximum prominence of peaks in DFT
    numProm = 0 # Number of peaks that with DFT prominence values above certain threshold

    cyclical = 0 # Whether a sound has repeated onsets or not (BB and rrh)

    featVec = np.array([self.attack, self.decay, self.sustain, self.release,
                        self.f0, self.f0E, self.f0T,
                        self.spread_avg, self.lowE_avg, self.midE_avg, self.highE_avg,
                        self.maxProm, self.numProm, self.cyclical])

    ### END Feature Vector parameters ###

    def __init__(self, name='', sbn='', data=None, dft=None, stft=None):
        self.name = name
        self.data = data
        self.dft = dft
        self.stft = stft

